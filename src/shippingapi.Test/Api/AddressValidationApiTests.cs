/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using shippingapi.Client;
using shippingapi.Api;
using shippingapi.Model;

namespace shippingapi.Test
{
    /// <summary>
    ///  Class for testing AddressValidationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AddressValidationApiTests
    {
        private AddressValidationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AddressValidationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AddressValidationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AddressValidationApi
            //Assert.IsInstanceOf(typeof(AddressValidationApi), instance);
        }

        
        /// <summary>
        /// Test VerifyAddress
        /// </summary>
        [Test]
        public void VerifyAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Address address = null;
            //bool? xPBUnifiedErrorStructure = null;
            //bool? minimalAddressValidation = null;
            //var response = instance.VerifyAddress(address, xPBUnifiedErrorStructure, minimalAddressValidation);
            //Assert.IsInstanceOf(typeof(Address), response, "response is Address");
        }
        
        /// <summary>
        /// Test VerifyAndSuggestAddress
        /// </summary>
        [Test]
        public void VerifyAndSuggestAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string returnSuggestions = null;
            //AddressVerifySuggest addressVerifySuggest = null;
            //bool? xPBUnifiedErrorStructure = null;
            //var response = instance.VerifyAndSuggestAddress(returnSuggestions, addressVerifySuggest, xPBUnifiedErrorStructure);
            //Assert.IsInstanceOf(typeof(AddressSuggestionResponse), response, "response is AddressSuggestionResponse");
        }
        
    }

}
